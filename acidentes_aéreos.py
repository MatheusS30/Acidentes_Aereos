# -*- coding: utf-8 -*-
"""Acidentes Aéreos

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CZDDeNTZ-WS0ECOlMrHjOEGp7qBduY8w

## **Bibliotecas**
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as st
from collections import Counter
import statistics as static

"""### *Numpy*
O Numpy é uma biblioteca Python utilizada principalmente para análise, cálculos e ciência de dados. Suportando, principalmente, arrays e matrizes multidimensionais.
É uma biblioteca Python que fornece um objeto array multidimensional, vários objetos derivados e uma variedade de rotinas para operações rápidas em arrays (NUMPY, ?).

### *Pandas*	
A biblioteca pandas é uma ferramenta para manipulação e análise de dados, projetado para lidar com dados bidimensionais (similar a planilhas do Exel).
Fornecendo estrutura de dados rápidas e flexíveis projetadas para tornar o trabalho com dados “relacionais” fácil e intuitivo. 
Ele visa ser o bloco de construção fundamental de alto níveis para fazer análises de dados prática e do mundo real em Python (PANDAS, ?).

### *Matplotlib*
Matplotlib é uma biblioteca abrangente para criar visualizações estáticas, animadas e interativas em Python (MATPLOTLIB, ?).
A Matplotlib é, basicamente, uma biblioteca usada para visualização de dados e plotagem gráfica. Oferece uma API orientada a objetos para embutir gráficos em aplicativos usando kits de ferramentas de GUI de uso geral, como Tkinter, wxPython, Qt ou GTK (COUTINHO, 2021).

### *Seaborn*
Seaborn é uma biblioteca de visualização de dados Python baseada no matplotlib. Ele fornece uma interface de alto nível para desenhar gráficos estatísticos atraentes e informativos (SEABORN, ?).

### *SciPy/ scipy.stats*

O SciPy é um pacote de rotinas científicas construídas na extensão NumPy, fornecendo ao usuário classes e comandos para a visualização e manipulação de dados.
O benefício adicional de basear o SciPy em Python é que isso também disponibiliza uma poderosa linguagem de programação para uso no desenvolvimento de programas sofisticados e aplicativos especializados. (SCIPY, ?).

### *Counter*

A classe Counter faz parte do módulo Collections. Contador é uma subclasse de Dicionário e usado para acompanhar os elementos e sua contagem.
O contador é uma subclasse disponível dentro da classe do dicionário. Usando a ferramenta Python Counter, você pode contar os pares chave-valor em um objeto, também chamado de objeto de tabela de hash (CAMPBELL, 2022). 

### *Statistics*

Esse módulo fornece funções para o cálculo de estatísticas matemáticas de dados numéricos (para valores do tipo Real). Ela destina-se ao nível de calculadoras gráficas e científicas (PYTHON, ?).


---

## Importando e visualizando os dados
"""

ocorrencias = pd.read_csv('/ocorrencias_cenipa.csv - ocorrencias_cenipa.csv.csv')
aeronaves= pd.read_excel('/aeronave.xlsx')

ocorrencias

aeronaves

"""## Acrescentando dado apurado em gráficos de barras horizontais"""

# adicionando coluna contagem

ocorrencias['CONTAGEM'] = 1
aeronaves['CONTAGEM']=1

"""## Ocorrências por estado"""

#tipo de ocorrencias e como se divide o total geral destas categorias

dic_regioes = {'Nordeste': ['AL', 'BA', 'CE', 'MA', 'PB', 'PE', 'PI', 'RN', 'SE'],
                'Norte': ['AM', 'RR', 'AP', 'PA', 'TO', 'RO', 'AC'],
                'Centro Oeste': ['MT', 'MS', 'GO'], 
                'Sudeste': ['SP', 'RJ', 'ES', 'MG'],
                'Sul': ['PR', 'RS', 'SC']}
tipos = ['ACIDENTE', 'INCIDENTE','INCIDENTE GRAVE']
dic_01 = {i: [ len([k for k in list(ocorrencias.loc[ocorrencias['tipo'] == i, ['estado']]['estado'])
                    if k in dic_regioes[j]]) for j in dic_regioes.keys()] for i in tipos}

dic_01['Região'] = list(dic_regioes.keys())
dados_regioes = pd.DataFrame(dic_01)

estado = Counter(ocorrencias['estado'])
fase_estado = sorted(estado, key = estado.get, reverse = True)
contador_estado = sorted(list(estado.values()), reverse = True)

plt.style.use("ggplot")
fig, ax = plt.subplots(figsize=(14, 6))


ax.set_ylabel('Numero de Ocorrencias')
ax.set_title('OCORRENCIA POR ESTADO')
ax.set_xlabel('Estados')

plt.text(7, 1100.9, 'Mediana: %d'%(np.median(np.array(contador_estado))))
plt.text(7, 1000.9, 'Média: %d'%(np.mean(np.array(contador_estado))))
plt.text(7, 900.8, 'Desvio padrão: %.2f'%(static.stdev(contador_estado)))   

Ocorrencia_estado = ocorrencias['estado'].value_counts()

Ocorrencia_estado.plot(kind='bar', color = '#00008B')

plt.show()

"""É notorio, conforme é possível visualizar pelo gráfico, que o estado com o maior número de ocorrências entre 2010 a 2019 foi o de **SP**, *São Paulo*.

Já o estado com o menor número de ocorrências foi o estado do **AP**, *Amapá*.


A média de ocorrências por estado ficou em 194, devido ao aos números de São Paulo.

## **Ocorrências por Região**
"""

def numero_em_cima(rects, ax): 
    for rect in rects:
        height = rect.get_height()
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  
                    textcoords="offset points",
                    ha='center', va='bottom')

plt.style.use("ggplot")
fig, ax = plt.subplots(figsize=(14, 6))

width = 0.25
r1 = np.arange(5)
r2 = [ x + width for x in r1]
r3 = [ x + width for x in r2]

rects1 = ax.bar(r1, dados_regioes['ACIDENTE'], width, label='ACIDENTE')
rects2 = ax.bar(r2, dados_regioes['INCIDENTE'], width, label='INCIDENTE', color = '#00008B')
rects3 = ax.bar(r3, dados_regioes['INCIDENTE GRAVE'], width, label='INCIDENTE GRAVE',color = '#00C957')

ax.set_ylabel('Ocorrências')
ax.set_title('REGIÕES\n ACIDENTE vs INCIDENTE ')
ax.set_xticks(r2)
ax.set_xticklabels(dados_regioes['Região'])
ax.legend()

numero_em_cima(rects1, ax)
numero_em_cima(rects2, ax)
numero_em_cima(rects3, ax)

plt.show()

"""Como foi possivel observar, de acordo com o gráfico, a região que mais registrou ocorrências no geral foi a região **Sudeste**, registrando um total de 2.271 ocorrências, somando acidentes e incidentes, o que representa 44,5% da totalidade.

A região com o menor número de ocorrências no geral é o **Nordeste**, que é, também, a região com o menor número de incidentes grave.

Já quando analisamos apenas os números de incidentes, a região com o menor número é a **Centro Oeste**.








"""

ax = ocorrencias.groupby('descricao')['CONTAGEM'].sum().sort_values().plot(kind='barh', figsize=(12,16))

for p in ax.patches:
    b=p.get_bbox()
    ax.annotate("{:.0f}".format(b.x1 + b.x0), (p.get_x() + p.get_width() + 1, p.get_y() - 0.05))

plt.title('QUANTIDADE DE OCORRÊNCIAS AGRUPADAS POR DESCRICAO \n Total: ' + str(ocorrencias['CONTAGEM'].sum()) + ' ocorrências')
plt.ylabel('MOTIVO DA OCORRÊNCIA')
plt.xlabel('QUANTIDADE DE OCORRÊNCIA')
plt.show()

"""É possivel concluir que a causa que mais desencadeou as ocorrências foi "***Falha no motor em voo***", falha essa que pode estar associada ao emperramento da válvula ou quebra de haste, complicações que podem ser decorrentes da utilização de combustíveis e óleo de baixa qualidade, troca em um período diferente do recomendado ou o uso prolongado de mistura pobre.

Entre as causas com o menor número estão: 

  - Perda de separação/ Colisão em voo; 
  - Causado por ricochete; 
  - Relacionado com Security; 
  - IMC não intencional; 
  - Hipóxia;
  - Explosão.

## **Ocorrências por tipo de aeronave**
"""

ax = ocorrencias.groupby('aeronave_tipo')['CONTAGEM'].sum().sort_values(ascending = False).plot(kind='bar', figsize=(11,5))

for p in ax.patches:
    b=p.get_bbox()
    ax.annotate("{:.0f}".format(b.y1 + b.y0), ((b.x0 + b.x1)/2 - 0.1, b.y1 + 15))
    
ax.set_title('QUANTIDADE DE OCORRÊNCIAS POR TIPO DE AERONAVE\nTotal: ' + str(ocorrencias['CONTAGEM'].sum()) + ' ocorrências')
ax.set_ylabel('QUANTIDADE DE OCORRÊNCIAS')
ax.set_xlabel('TIPOS DE AERONAVES')
plt.xticks(rotation=45)
plt.show()

"""Após observar o gráfico, é evidente, devido ao expressivo valor,que o **Avião** é o tipo de aeronave com o maior número de ocorrências.

Já os tipos com o menor número de ocorrências são: Balão; Dirigível e Hidroavião, todos com 1 ocorrência.

## **Ocorrências por fabricantes**
"""

ocorrencias_fabricante = ocorrencias.groupby('aeronave_fabricante')['CONTAGEM'].sum().sort_values(ascending = False)
ocorrencias_fabricante.head(10).plot(kind='barh', color = '#8B0A50', figsize=(10,5))

plt.title('QUANTIDADE DE OCORRÊNCIAS POR FABRICANTE\nTotal: ' + str(ocorrencias['CONTAGEM'].sum()) + ' ocorrências')
plt.xlabel('QUANTIDADE DE OCORRÊNCIAS')
plt.ylabel('FABRICANTES')
plt.show()

"""É possível concluir que a **Cessna Aircraft** foi a fabricante com o maior número de ocorrências, decorrência do número de aeronaves em atividade desse fabricante.

Vale observar, ainda, que a **Embraer** e a Neiva Industria Aeronautica possui o número de ocorrências bem próximo uns dos outro.

## **Ocorrência por categoria de avião**
"""

categoria_aviao = aeronaves.groupby('aeronave_registro_segmento')['CONTAGEM'].sum().sort_values().plot(kind='barh', color= '#1874CD', figsize=(11,7))

plt.title('QUANTIDADE DE OCORRÊNCIAS\nAGRUPADAS POR CATEGORIA DE AVIÃO')
plt.xlabel('QUANTIDADE DE OCORRÊNCIAS')
plt.ylabel('CATEGORIA DO AVIÃO')
plt.show()

"""Nota-se que a categoria de avião com o **maior** número de ocorrências é a categoria **Particular**.

A categoria com o menor número de ocorrências é a **Administração Indireta**.

Um ponto interessante é que a categoria **Histórica** não possui *nenhuma* (0) ocorrência.

## Ocorrência por fase de operação
"""

fase_de_operacao = ocorrencias.groupby('aeronave_fase_operacao')['CONTAGEM'].sum().sort_values().plot(kind='barh', color = '#00008B', figsize=(11,7))

plt.title('QUANTIDADE DE OCORRÊNCIAS POR FASE DE OPERAÇÃO\nTotal: ' + str(ocorrencias['CONTAGEM'].sum()) + ' ocorrências')
plt.xlabel('QUANTIDADE DE OCORRÊNCIAS')
plt.ylabel('FASE DA OPERAÇÃO')
plt.show()

"""Compreende-se que a fase de operação com o maior índice de ocorrência é a fase de **Pouso**, devido as diversas condições e variantes.

A fase com o menor índice é a **Descida Descontrolada**.

Há, ainda, fases com *nenhum (0)* número de ocorrências, como é o caso das fases:



*   Descida de Emergência;
*   Mudança de Nível ou Altitude;
*   Emprego Militar.

## **Ocorrências por ano**
"""

data_ocorrencia = ocorrencias.copy()
data_ocorrencia['data'] = data_ocorrencia['data'].apply(lambda x: x.replace(x,x[0:4]))
data_ocorrencia.groupby('data')['CONTAGEM'].sum().plot(color='purple', figsize=(12,5), grid=True)

plt.title('QUANTIDADE DE OCORRÊNCIA AO LONGO DOS ANOS \n Total: ' + str(ocorrencias['CONTAGEM'].sum()) + ' ocorrências')
plt.xlabel('ANO REFERÊNCIA')
plt.ylabel('QUANTIDADE DE OCORRÊNCIAS')
plt.show()

"""Observa-se que conforme os anos o número de ocorrências variou bastante, no entanto, nota-se que o ano de **2013** foi o ano com o maior índice de ocorrências.

Em contrapartida, o ano de **2016** foi o ano com o menor índice.

A média anual das ocorrências é de 524, onde metade dos anos examinados ultrapassam **500** ocorrências.

Houve uma queda entre os anos de *2013* a *2016*, todavia, de 2017 para frente há uma tendencia de alta.

## **Grau de dano**
"""

danos_aeronave = ocorrencias.groupby('aeronave_nivel_dano')['CONTAGEM'].sum().sort_values().plot(kind='bar', color='#68228B', figsize=(11,7))

plt.title('DANOS CAUSADOS NA AERONAVE')
plt.xlabel('TIPO DE DANO')
plt.ylabel('NUMERO DE DANOS')
plt.show()

"""Nota-se que na **maior** parte das ocorrências não houve nenhum dano à aeronave.

Na **minoria** das ocorências, com o valor de 42 ocorrências, houve danos indeterminado.

## **Ocorrência por ano de fabricação**
"""

ocorrencias_ano_fabricacao = ocorrencias.groupby('aeronave_ano_fabricacao')['CONTAGEM'].sum().sort_values().plot(kind='bar', color = "#EE3B3B", figsize=(20,12))

plt.title('OCORRÊNCIAS POR ANO DE FABRICAÇÃO')
plt.xlabel('QUANTIDADE DE OCORRÊNCIAS')
plt.ylabel('ANO DE FABRICÇÃO DAS AERONAVES')
plt.show()

"""Nota-se que as aeronaves fabricadas no anos de **2008** foram as que mais apresentaram ocorrências.

Os anos de **1940**, **1942**, **1945**, **1954** e **1956** são os anos com o menor número de ocorrências, todos com números próximos.

## **Ocorrência por tipo de motor**
"""

ax = ocorrencias.groupby('motor_tipo')['CONTAGEM'].sum().sort_values().plot(kind='barh', color = '#00008B', figsize=(12,8))

for p in ax.patches:
    b=p.get_bbox()
    ax.annotate("{:.0f}".format(b.x1 + b.x0), (p.get_x() + p.get_width() + 1, p.get_y() - 0.05))

plt.title('QUANTIDADE DE OCORRÊNCIAS POR TIPO DE MOTOR\n Total: ' + str(ocorrencias['CONTAGEM'].sum()) + ' ocorrências')
plt.ylabel('TIPO DO MOTOR')
plt.xlabel('QUANTIDADE DE OCORRÊNCIAS')
plt.show()

"""É possível notar que o tipo de motor com o maior índice de ocorrências é o motor do tipo Pistão, o que pode ser compreendido quando se leva em consideração o grande volume de motores movidos a pistão em atividade.

Já o tipo de motor com o menor índice de ocorrências é o tipo **Sem Tração**.

Uma observação é que o tipo de motor Pistão concentra um total de **2952** ocorrências, que representa o **dobro** de ocorrências que o tipo de motor com o segundo maior índice de ocorrência, que é o Jato, com **1017** ocorrências.

## **Ocorrências por quantidade de motores**
"""

ax = ocorrencias.groupby('aeronave_motor_quantidade')['CONTAGEM'].sum().sort_values().plot(kind='barh', color = '#00008B', figsize=(12,8))

for p in ax.patches:
    b=p.get_bbox()
    ax.annotate("{:.0f}".format(b.x1 + b.x0), (p.get_x() + p.get_width() + 1, p.get_y() - 0.05))


plt.title('QUANTIDADE DE OCORRÊNCIAS POR QUANTIDADE DE MOTORES\n Total: ' + str(ocorrencias['CONTAGEM'].sum()) + ' ocorrências')
plt.ylabel('QUANTIDADE DE DO MOTORES')
plt.xlabel('QUANTIDADE DE OCORRÊNCIAS')
plt.show()

"""Conforme o gráfico, nota-se que as aeronaves com 1 motor, ou seja, **Monomotor**, são as que apresentam maior número de ocorrências, dado o elevado número de aviões que possuem monomotor ou bimotor, com relação aos demais.

 Já o tipo de motor com a menor frequência foi o Quadrimotor.

## Estudo de Regressão Linear
"""

ax = ocorrencias.groupby('aeronave_assentos')['CONTAGEM'].sum().sort_values().plot(kind='barh', lw=3, color = '#00008B', figsize=(20,15))


for p in ax.patches:
    b=p.get_bbox()
    ax.annotate("{:.0f}".format(b.x1 + b.x0), (p.get_x() + p.get_width() + 1, p.get_y() - 0.001))

plt.title('OCORRÊNCIAS POR QUANTIDADE DE ASSENTOS')
plt.ylabel('QUANTIDADE DE ASSENTOS DAS AERONAVES')
plt.xlabel('QUANTIDADE DE OCORRÊNCIAS')
plt.show()

"""No gráfico o **eixo X** representa o número de ocorrências entre os anos de 2010 à 2019, já o **eixo Y** representa a quantidade de assentos das aeronaves envolvidas nas ocorrências.

Verifica-se a existência, com relação ao **eixo Y**, de uma **Regressão Linear** do tipo **decrescente**, onde se encontram diversas aeronaves com mais de 17 assentos e com o mesmo número de ocorrências.


Nota-se que as aeronaves com maior número de ocorrências são as aeronaves com que possuem **6 assentos**.


Vale resaltar que aeronaves com o menor número de assentos possuem o maior número de ocorrências.
"""

ocorrencias.describe().round()

ocorrencias.corr().round(4)

ax= sns.lmplot(x="aeronaves_envolvidas", y="aeronave_assentos", data=ocorrencias)
ax.set_xlabels("ASSENTOS DAS AERONAVES", fontsize=14)
ax.set_ylabels("AERONAVES ENVOLVIDAS EM OCORRÊNCIAS", fontsize=14)
plt.show()

"""A primeira instância o gráfico pode parecer um tanto confuso e incompreensível, no entanto no entanto ele mostra se há relação entre os acidentes com o número de assentos.

No entanto, mesmo que o maior índice de acidentes acontecem com aeronaves que possuem 6 assentos, esse gráfico representa a não existencia de relação entre eles.

## **Conclusão**
"""